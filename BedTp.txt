local BedTP
    local Method = "Flag"
    BedTP = Tabs["Exploit"]:NewToggle({
        ["Name"] = "BedTP",
        ["InfoText"] = "Tps to a random bed",
        ["Suffix"] = function() return Method end,
        ["Function"] = function(callback)
            Enabled = callback
            if Enabled then
                spawn(function()
                    local suc, err = pcall(function()
                        local beds = getbeds(99e99)
                        local bed = beds[math.random(1, #beds)]
                        local bedpos = (bed.CFrame + Vector3.new(0, 3, 0))
                        local hrp = lplr.Character.HumanoidRootPart
                        if Method == "Flag" then
                            hrp.CFrame = CFrame.new(hrp.Position.X, 50000, hrp.Position.Z)
                            task.wait(1.5)
                            hrp.CFrame = CFrame.new(bedpos.X, bedpos.Y, bedpos.Z)
                        elseif Method == "Reset" then
                            if lplr.Character:FindFirstChild("ForceField") then repeat task.wait() until not lplr.Character:FindFirstChild("ForceField") end
                            lplr.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Dead)
                            lplr.CharacterAdded:Wait()
                            hrp = lplr.Character:WaitForChild("HumanoidRootPart")
                            hrp.CFrame = CFrame.new(bedpos.X, bedpos.Y, bedpos.Z)
                        elseif Method == "Clear" then
                            hrp.CFrame = CFrame.new(hrp.Position.X, bedpos.Y, bedpos.Z)
                            hrp.Velocity = Vector3.new(0, 0.1, 0)
                            for i = 1,100 do
                                task.wait()
                                hrp.CFrame = CFrame.new(bedpos.X, bedpos.Y, bedpos.Z)
                                hrp.Velocity = Vector3.new(0, 0, 0)
                            end
                        elseif Method == "Anchor" then
                            lplr.Character.HumanoidRootPart.CFrame = CFrame.new(bedpos.X, bedpos.Y, bedpos.Z)
                            lplr.Character.HumanoidRootPart.Anchored = true
                            task.wait(4)
                            lplr.Character.HumanoidRootPart.Anchored = false
                            for i = 1,100 do
                                task.wait()
                                lplr.Character.HumanoidRootPart.CFrame = CFrame.new(bedpos.X, bedpos.Y, bedpos.Z)
                                lplr.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                            end
                        elseif Method == "Item" then
                            if hasdao() ~= false and lplr.Character:GetAttribute("CanDashNext") < game:GetService("Workspace"):GetServerTimeNow() then
                                game:GetService("ReplicatedStorage"):FindFirstChild("events-@easy-games/game-core:shared/game-core-networking@getEvents.Events").useAbility:FireServer("dash", {
                                    ["direction"] = lplr.Character.HumanoidRootPart.CFrame.LookVector,
                                    ["weapon"] = hasdao(),
                                    ["origin"] = lplr.Character.HumanoidRootPart.Position
                                })
                                for i = 1,25 do
                                    task.wait()
                                    hrp.CFrame = CFrame.new(bedpos.X, bedpos.Y, bedpos.Z)
                                    hrp.Velocity = Vector3.new(0, 0, 0)
                                end
                            elseif getitem("grappling_hook") then
                                Client:Get(bedwars["ProjectileRemote"]):CallServerAsync(
                                    lplr.Character.InventoryFolder.Value.grappling_hook,
                                    "grappling_hook_projectile",
                                    "grappling_hook_projectile",
                                    lplr.Character.HumanoidRootPart.CFrame * CFrame.new(0, -3, 4).Position,
                                    lplr.Character.HumanoidRootPart.Position,
                                    Vector3.new(0, -20, 0),
                                    game:GetService("HttpService"):GenerateGUID(false),
                                    {
                                        ["drawDurationSeconds"] = 1
                                    },
                                    game:GetService("Workspace"):GetServerTimeNow()
                                )
                                task.wait(0.25)
                                for i = 1,25 do
                                    task.wait()
                                    hrp.CFrame = CFrame.new(bedpos.X, bedpos.Y, bedpos.Z)
                                    hrp.Velocity = Vector3.new(0, 0, 0)
                                end
                            end
                        elseif Method == "Lagback" then
                            repeat
                                task.wait()
                                hrp.Velocity = Vector3.new(0, 10000, 0)
                            until not isnetworkowner(lplr.Character.HumanoidRootPart)
                            lplr.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                            repeat task.wait() until isnetworkowner(lplr.Character.HumanoidRootPart)
                        end
                    end)
                    if suc then
                        createnotification("BedTP", "Attempted to TP to bed", 5, "i")
                    else
                        createnotification("BedTP", "No bed(s) existant to TP to", 5, "x")
                    end
                    BedTP:ToggleButton(true)
                end)
            end
        end
    })
    BedTP:Dropdown({
        ["Name"] = "TPMode",
        ["List"] = {"Flag", "Reset", "Clear", "Anchor","Item", "Lagback"},
        ["Function"] = function(val)
            Method = val
        end
    })
end)